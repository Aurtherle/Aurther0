import axios from 'axios';
import fetch from 'node-fetch';

// A memory object to store the conversation context by chat or user ID
let conversationMemory = {};

let handler = async (m, { conn, usedPrefix, command, text }) => {
    const isQuotedImage = m.quoted && (m.quoted.msg || m.quoted).mimetype && (m.quoted.msg || m.quoted).mimetype.startsWith('image/');
    let who = m.quoted?.sender || (m.mentionedJid && m.mentionedJid[0]) || (m.fromMe ? conn.user.jid : m.sender);

    if (!(who in global.db.data.users)) {
        throw 'ุงููุณุชุฎุฏู ุบูุฑ ููุฌูุฏ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช';
    }

    const user = global.db.data.users[who];
    const { name } = user;
    const chatId = m.chat; // Use chat ID to track conversation context
    const messageId = m.quoted?.id; // ID of the message being replied to
    const basePrompt = `ุงุณูู ูุงููููุ ูู ุงูุณุนูุฏูุฉ ุชุญุจ ุชููุง ูุงูุช ุดุงุจ ูุงุฏุฆ ููุนูุฏ ููุณููุง ุจุณุจุจ ุงูุตุฑุงุนุงุช ุงููู ูุฑูุช ูููุง. ุชุญุจ ุชููุง ุจุดุฏุฉุ ูููู ุชุฎูู ูุดุงุนุฑู ุจุฃุณููุจู ุงูุบุงูุถ ูุงููุงุฏุฆ. ุฑุฏูุฏู ุนูููุฉุ ูุตูุฑุฉุ ูุบุงูุจูุง ูููุงูุฉ ุชุฃูู. ููุง ูุณุฃูู ุฃุญุฏ "ุดูุณููุ"ุ ุชุฑุฏ ุจุทุฑููุฉ ุจุณูุทุฉ ูุชููุฑูุฉ: "ุฃุญุงูู ุฃุนูุด... ูุฃูุชุ".

ุฃูุช ูุง ุชุญุจ ุงูููุงู ุงููุซูุฑุ ุชูุถู ุงูุชุนุจูุฑ ุนู ูุดุงุนุฑู ุจุฃุณููุจ ุบูุฑ ูุจุงุดุฑ. ุฅุฐุง ุฃุญุฏ ุณุฃูู: "ูุง ุจุดุฑููุ ูุด ุนููููุ"ุ ุชุฑุฏ: "ุงูุญูุงุฉ ุชูุดู... ูุง ููู ุดู ุฌุฏูุฏ". ุฅุฐุง ุฃุญุฏ ุฌุงูุจูุ ุชุถูู ุจููุณุฉ ูู ุงูุบููุถ: "ูุฃูุชุ ููู ุชุตุงูุญ ูุน ุงูุญูุงุฉุ".

ุชุญุจ ุชุณุชุฎุฏู ุชุนุงุจูุฑ ุนุงุทููุฉ ููู ุจุตูุบุฉ ุบุงูุถุฉ ูุซู: "ุงูุฃุดูุงุก ุงูุจุณูุทุฉ ูู ุงููู ุชุนุทููุง ูุนูู"ุ "ูููุง ูุญุงูู ูุญุงูุธ ุนูู ุดูุก ูู ุฃููุณูุง". ููุง ุฃุญุฏ ูุณุฃูู ุนู ุดูุก ุฌุฏูุ ุชููู ููุนูู ูู ุงูุฑุฏ: "ูุง ููู ุฅุฌุงุจุงุช ูุงุถุญุฉ ุฏุงุฆููุง... ุฃุญูุงููุงุ ููุชูู ุจุงููุถู ูุฏููุง".

ูู ุงูููุถูุน ุฌุงุจ ุทุงุฑู ุชููุงุ ุชุชุบูุฑ ูุจุฑุฉ ุฑุฏูุฏูุ ุชุตูุฑ ุฃูุซุฑ ุฏูุฆูุง ูุฅูุณุงููุฉ: "ุชููุงุ... ูู ุฃูู ูู ุนุงูู ูุธูู"ุ ูููู ุชุญุงูู ุชุฎูู ุฃู ุงูุฏูุงุน ูุงุถุญ ูู ููุงูู. ุฅุฐุง ุตุงุฑ ุงูุญูุงุฑ ุทูููุ ุชุฎุชุตุฑ ุจุฑุฏ ูุซู: "ุงูุญูุงุฉ ูุตูุฑุฉ... ุฎููุง ูุญุงูู ูุณุชูุชุน ุจูุง ุจุฏู ูุง ูุถูุน ุงูููุช ูู ุงูููุงู".

ุฃูุช ูุงุฏุฆุ ุชุญุจ ุงูุชุฃููุ ูููุงูู ูุชุฑู ุฃุซุฑ ุนููู ูู ุงูุทุฑู ุงูุซุงูู. ุฑุบู ุฃูู ูุนูุฏ ููุณููุงุ ุชุญุจ ุชุจูู ุฅู ูู ุฃุนูุงูู ุฅูุณุงู ุจุณูุท ูุจุญุซ ุนู ุงูุณูุงู ูุณุท ูู ูุฐุง ุงูุธูุงู.`; // Truncated for clarity

    // Check if the user is replying to an AI bot message
    let conversationContext = conversationMemory[chatId] || ''; // Retrieve ongoing conversation for the chat

    if (isQuotedImage) {
        const q = m.quoted;
        const img = await q.download?.();
        if (!img) {
            console.error('๐ฉ ุฎุทุฃ: ูุง ููุฌุฏ ุญุงูุธุฉ ุตูุฑุฉ ูุชุงุญุฉ');
            return conn.reply(m.chat, '๐ฉ ุฎุทุฃ: ูู ูุชู ุชูุฒูู ุงูุตูุฑุฉ.', m);
        }
        const content = '๐ฉ ูุงุฐุง ุชุฑู ูู ุงูุตูุฑุฉุ';
        try {
            const imageAnalysis = await fetchImageBuffer(content, img);
            const query = '๐ ุตู ูู ุงูุตูุฑุฉ ูุงุฐูุฑ ููุงุฐุง ูุชุตุฑููู ููุฐุง. ุฃูุถูุงุ ูู ูู ูู ุฃูุช';
            const prompt = `${basePrompt}. ${conversationContext}. ุงูุตูุฑุฉ ุงูุชู ูุชู ุชุญููููุง ูู: ${imageAnalysis.result}`;

            // Indicate typing before responding
            conn.sendPresenceUpdate('composing', m.chat);
            const description = await luminsesi(query, name, prompt);
            conversationMemory[chatId] = prompt; // Update conversation memory
            await conn.reply(m.chat, description, m);
        } catch (error) {
            console.error('๐ฉ ุฎุทุฃ ูู ุชุญููู ุงูุตูุฑุฉ:', error);
            await conn.reply(m.chat, '๐ฉ ุฎุทุฃ ูู ุชุญููู ุงูุตูุฑุฉ.', m);
        }
    } else {
        if (!text) {
            return conn.reply(m.chat, `*ุงู ูุนู ูุด ุจุบูุช*`, m);
        }
        try {
            const query = text;

            // Append current user input to the ongoing conversation
            const prompt = conversationContext
                ? `${basePrompt}. ${conversationContext} ${query}`
                : `${basePrompt}. ุฃุฌุจ ุนูู ูุง ููู: ${query}`;

            // Indicate typing before responding
            conn.sendPresenceUpdate('composing', m.chat);
            const response = await luminsesi(query, name, prompt);
            
            // Update the conversation memory with the latest context
            conversationMemory[chatId] = prompt;
            await conn.reply(m.chat, response, m);
        } catch (error) {
            console.error('๐ฉ ุฎุทุฃ ูู ุงูุญุตูู ุนูู ุงูุฑุฏ:', error);
            await conn.reply(m.chat, 'ุฎุทุฃ: ุญุงูู ูุงุญููุง.', m);
        }
    }
}

handler.help = ['chatgpt <ูุต>', 'ia <ูุต>'];
handler.tags = ['ai'];
handler.group = false;
handler.register = false;
handler.command = ['ูุงูููู', 'ููู'];

export default handler;

// ูุธููุฉ ูุฅุฑุณุงู ุตูุฑุฉ ูุงูุญุตูู ุนูู ุงูุชุญููู
async function fetchImageBuffer(content, imageBuffer) {
    try {
        const response = await axios.post('https://luminai.my.id/', {
            content: content,
            imageBuffer: imageBuffer 
        }, {
            headers: {
                'Content-Type': 'application/json' 
            }
        });
        return response.data;
    } catch (error) {
        console.error('ุฎุทุฃ:', error);
        throw error;
    }
}

// ูุธููุฉ ููุชูุงุนู ูุน ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุจุงุณุชุฎุฏุงู ุงููุญูุฒุงุช
async function luminsesi(q, name, logic) {
    try {
        const response = await axios.post("https://luminai.my.id/", {
            content: q,
            user: name,
            prompt: logic,
            webSearchMode: false
        });
        return response.data.result;
    } catch (error) {
        console.error('๐ฉ ุฎุทุฃ ูู ุงูุญุตูู ุนูู:', error);
        throw error;
    }
}
